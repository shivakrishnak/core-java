public class InsuranceCalculator {
    public double calculateInsurance(double income) {
        if (income <= 10000) {
            return income*0.365;
        } else if (income <= 30000) {
            return (income-10000)*0.2+35600;
        } else if (income <= 60000) {
            return (income-30000)*0.1+76500;
        } else {
            return (income-60000)*0.02+105600;
        }

    }
}



Programmed with problem :


@Service
@Slf4j
class EventService {

    public Lock lock = new ReentrantLock();

    public void processEvent(Event event) {
        lock.lock();
        if (event.getType() == EventType.REVIEW_APPROVED) {
            processApproved(event.getId(), event.getPayload());
        } else if (event.getType() == EventType.REVIEW_CREATED) {
            processCreated(event.getId(), event.getPayload());
        } else if (event.getType() == EventType.REVIEW_DELETED) {
            processDeleted(event.getId(), event.getPayload());
        }
        lock.unlock();
    }

    private void processApproved(String id, String payload) {
        throw new Error("Approved event is temporary deprecated!");
    }

    private void processCreated(String id, String payload) {
        log.info("Created: {}, payload: {}", id, payload);
    }

    private void processDeleted(String id, String payload) {
        throw new Error("Deleted event is temporary deprecated!");
    }
} 


Programmed with solid Principles:



public class RentCarService {

    public Car findCar(String carNo) {
        //find car by number
        return car;
    }

    public Order orderCar(String carNo, Client client) {
        //client order car
        return order;
    }

    public void printOrder(Order order) {
        //print order
    }
    public void getCarInterestInfo(String carType) {
        if (carType.equals("sedan")) {
            //do some job
        }
        if (carType.equals("pickup")) {
            //do some job
        }
        if (carType.equals("van")) {
            //do some job
        }
    }
    public void sendMessage(String typeMessage, String message) {
        if (typeMessage.equals("email")) {
            //write email
            //use JavaMailSenderAPI
        }
    }
}



Programme with Configuration :



@Configuration
@Slf4j
@Profile("dev")
public class RestTemplateConfig {
	
    @Bean
    public RestTemplate defaultRestTemplate(@Autowired(required = false) @Qualifier("defaultRestLoggingInterceptor") 
	                                         RestTemplateLoggingRequestInterceptor defaultRestLoggingInterceptor,
                                         @Autowired(required = false) @Qualifier("kafkaRestLoggingInterceptor")
										 RestTemplateLoggingRequestInterceptor kafkaRestLoggingInterceptor,
                                         @Qualifier("clientCredentials") ClientCredentialsResourceDetails clientCredentialsResourceDetails) {
        RestTemplate template = new RestTemplate();

        List<ClientHttpRequestInterceptor> interceptors = new ArrayList<>(template.getInterceptors());
        if (defaultRestLoggingInterceptor != null)
            interceptors.add(defaultRestLoggingInterceptor);
        if (kafkaRestLoggingInterceptor != null)
            interceptors.add(kafkaRestLoggingInterceptor);
        template.setInterceptors(interceptors);
        return template;
    }


}